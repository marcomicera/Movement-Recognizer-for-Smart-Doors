% Self-Organizing Map

function result = som_h(input)
    %% result variable structure
    % [0 0]: static
    % [0 1]: in
    % [1 0]: out
    % [1 1]: pass

    %% Checking input dimension
    if size(input, 1) ~= 1
        error('Wrong input row size');
    elseif size(input, 2) ~= 30
        error('Wrong input column size');    
    end

    %% Creating a Self-Organizing Map
    som_net_1 = selforgmap([10 10]);

    %% Choosing Plot Functions
    som_net_1.plotFcns = {
        'plotsomtop','plotsomnc','plotsomnd', ...
        'plotsomplanes', 'plotsomhits', 'plotsompos'
    };

    %% Training
    global ds_samples;
    [som_net_1, ~] = train(som_net_1, ds_samples');

    %% Hierarchical clustering

    % SOM weights
    som_weights = som_net_1.IW{1, 1};

    % 'ward': Inner squared distance (minimum variance algorithm), 
    % appropriate for Euclidean distances only
    som_linkages = linkage(som_weights, 'ward'); 

    % som_dendrogram = dendrogram(som_linkages, 0);

    % Clusters creation
    som_clusters = cluster(som_linkages, 'maxclust', 2);

    %% som_net_1 plots
    % figure, plotsomtop(som_net_1)
    % figure, plotsomnc(som_net_1)
    % figure, plotsomnd(som_net_1)
    % figure, plotsomplanes(som_net_1)
    % figure, plotsomhits(som_net_1, ds_samples')
    % figure, plotsompos(som_net_1, ds_samples')
    
    %% Input computation
    som_ds_h_output = som_clusters(find(som_net_1(input')), 1);

    if som_h_output == 2 % dynamic
        % Creating second level SOM
        som_net_2 = selforgmap([10 10]);
        som_net_2.plotFcns = {
            'plotsomtop','plotsomnc','plotsomnd', ...
            'plotsomplanes', 'plotsomhits', 'plotsompos'
        };
        
        % Training
        global d_samples;
        [som_net_2, ~] = train(som_net_2, ds_samples');
        
        % Second level SOM weights
        som_2_weights = som_net_2.IW{1, 1};
        som_2_linkages = linkage(som_2_weights, 'ward'); 
        som_2_clusters = cluster(som_2_linkages, 'maxclust', 2);
        
    elseif som_h_output == 1 % static
        result = [0; 0];
        disp('The given input represents a static action.');
    else
        result = [-1, -1];
        disp('The given input does not represent nothing.');
    end

    

    %% Cleaning
    clear training_record;
end